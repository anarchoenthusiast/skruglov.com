---
import { type CollectionEntry, getCollection } from "astro:content";
import PageLayout from "@layouts/PageLayout.astro";
import Container from "@components/Container.astro";
import FormattedDate from "@components/FormattedDate.astro";
import { readingTime } from "@lib/utils";
import CTA from "@components/CTA.astro";
import PostList from "@components/PostList.astro";
import { SITE } from "@consts";

export async function getStaticPaths() {
  const posts = (await getCollection("blog"))
    .filter(post => !post.data.draft)
    .sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf());
  return posts.map((post) => ({
    params: { slug: post.slug },
    props: { post, posts },
  }));
}

type Props = {
  post: CollectionEntry<"blog">;
  posts: CollectionEntry<"blog">[];
};

const { post, posts } = Astro.props;
const { Content } = await post.render();

// Получаем параметр from из URL для передачи в ссылки на другие посты
const fromParam = Astro.url.searchParams.get('from') || 'blog';

// Получаем другие последние посты, исключая текущий
const otherPosts = posts
  .filter(p => p.id !== post.id)
  .slice(0, SITE.NUM_POSTS_ON_HOMEPAGE);

// Если нет других постов, показываем текущий пост
const postsToShow = otherPosts.length > 0 ? otherPosts : [post];

// SEO: определяем canonical URL без параметров и robots meta
const canonicalURL = new URL(`/blog/${post.slug}/`, Astro.site).href;
const hasFromParam = Astro.url.searchParams.has('from');
const robotsMeta = hasFromParam ? 'noindex, follow' : undefined;

const breadcrumbs = [
  { label: SITE.NAME, url: '/' },
  { label: 'Blog', url: '/blog' },
  { label: post.data.title }
];

---

<PageLayout 
  title={post.data.title} 
  description={post.data.description} 
  pageType="blog"
  breadcrumbs={breadcrumbs}
  canonicalURL={canonicalURL}
  robots={robotsMeta}
>
  <!-- Контент страницы с анимацией -->
  <div class="blog-page-content">
    <Container size="blog-mobile">
    <div class="blog-header-section space-y-8 border-b border-black/10 dark:border-white/10">
      <div class="space-y-2">
        <h1 class="animate font-tiempos text-4xl text-black dark:text-white tracking-[-0.028em] leading-[1.167] font-normal">
          {post.data.title}
        </h1>
        <div class="animate flex items-center gap-1.5">
          <div class="font-grotesk text-base text-black/44 dark:text-white/44">
            <FormattedDate date={post.data.date} />
          </div>
          &bull;
          <div class="font-grotesk text-base text-black/44 dark:text-white/44">
            {readingTime(post.body)}
          </div>
        </div>
      </div>
      {post.data.description && (
        <div class="animate">
          <p class="font-grotesk text-base leading-[1.5] text-black dark:text-white">
            {post.data.description}
          </p>
        </div>
      )}
      <div class="animate">
        <button 
          onclick="document.querySelector('article').scrollIntoView({ behavior: 'smooth', block: 'start' })"
          class="inline-flex items-center gap-1 font-grotesk font-medium text-base text-black dark:text-white hover:opacity-80 transition-opacity leading-[1.5] cursor-pointer"
        >
          Read Notes
          <svg width="22" height="24" viewBox="0 0 22 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M11.1035 16.5215C11.0231 16.5215 10.9469 16.5046 10.875 16.4707C10.8073 16.4411 10.7438 16.3967 10.6846 16.3374L5.76511 11.3101C5.65091 11.1958 5.59371 11.0562 5.59371 10.8911C5.59371 10.7853 5.61911 10.688 5.66991 10.5991C5.72071 10.5103 5.79051 10.4404 5.87941 10.3897C5.96401 10.3389 6.06141 10.3135 6.17141 10.3135C6.32801 10.3135 6.46551 10.3685 6.58401 10.4785L11.1035 15.0996L15.6231 10.4785C15.7415 10.3685 15.8791 10.3135 16.0357 10.3135C16.1457 10.3135 16.243 10.3389 16.3276 10.3897C16.4165 10.4404 16.4863 10.5103 16.5371 10.5991C16.5879 10.688 16.6133 10.7853 16.6133 10.8911C16.6133 11.0562 16.5583 11.1958 16.4482 11.3101L11.5225 16.3374C11.4632 16.3967 11.3976 16.4411 11.3257 16.4707C11.258 16.5046 11.1839 16.5215 11.1035 16.5215Z" fill="currentColor"/>
          </svg>
        </button>
      </div>
    </div>
    <article class="animate space-y-6">
      <Content />
    </article>
  </Container>
  
      <Container size="blog-mobile">
      <div class="pt-16">
        <PostList 
          title="Latest Writing" 
          posts={postsToShow} 
          seeAllLink="/blog" 
          seeAllText="All writing"
          fromSource={fromParam}
        />
      </div>
    </Container>
    
    <CTA size="blog" />
  </div>
  </PageLayout>
  
  <script is:inline>
    function initBlogPageAnimation() {
      // Проверяем URL параметры
      const urlParams = new URLSearchParams(window.location.search);
      const fromSource = urlParams.get('from');
      const hasFromParam = fromSource === 'home' || fromSource === 'blog';
      
      const pageContent = document.querySelector('.blog-page-content');
      
      if (hasFromParam && pageContent) {
        // Добавляем анимацию появления страницы
        pageContent.style.opacity = '0';
        pageContent.style.transform = 'translateY(20px)';
        
        // Анимируем появление
        setTimeout(() => {
          pageContent.style.transition = 'opacity 0.4s ease-out, transform 0.4s ease-out';
          pageContent.style.opacity = '1';
          pageContent.style.transform = 'translateY(0)';
        }, 100);
      }
    }
    
    function updateMorePostsLinks() {
      // Получаем сохраненное значение или значение из URL
      const urlParams = new URLSearchParams(window.location.search);
      const fromSource = urlParams.get('from');
      const savedSource = sessionStorage.getItem('blogNavigationSource');
      
      // Определяем финальное значение - приоритет сохраненному
      const finalFromParam = savedSource || fromSource || 'blog';
      
      // Находим все ссылки на посты в секции Latest Writing
      const morePostsLinks = document.querySelectorAll('a[href^="/blog/"]');
      
      morePostsLinks.forEach(link => {
        const url = new URL(link.href);
        // Обновляем параметр from
        url.searchParams.set('from', finalFromParam);
        link.href = url.toString();
        
        // Добавляем обработчик для сохранения источника навигации и позиции скролла
        link.addEventListener('click', function() {
          // Сохраняем источник навигации для корректной работы кнопки закрытия
          sessionStorage.setItem('blogNavigationSource', finalFromParam);
          console.log('Set blogNavigationSource to', finalFromParam, 'from More Posts');
          
          if (finalFromParam === 'home') {
            // Сохраняем позицию главной страницы только если её еще нет
            if (!sessionStorage.getItem('homeScrollPosition')) {
              console.log('More Posts link clicked from home context');
            }
          } else if (finalFromParam === 'blog') {
            // Сохраняем позицию страницы блога только если её еще нет
            if (!sessionStorage.getItem('blogScrollPosition')) {
              console.log('More Posts link clicked from blog context');
            }
          }
        });
      });
      
      console.log('Updated More Posts links with from:', finalFromParam);
    }
    
    // Запускаем инициализацию
    document.addEventListener('DOMContentLoaded', function() {
      initBlogPageAnimation();
      updateMorePostsLinks();
    });
    
    document.addEventListener('astro:page-load', function() {
      initBlogPageAnimation();
      updateMorePostsLinks();
    });
  </script>
  
    <style>
    /* Анимация страницы */
    .blog-page-content {
      opacity: 1;
      transform: translateY(0);
      filter: blur(0px);
      transition: opacity 0.15s ease-out, transform 0.4s ease-out, filter 0.15s ease-out;
    }
    
    /* Высота секции с заголовком блога */
    .blog-header-section {
      height: clamp(400px, calc(100vh - 120px), 900px); /* Минимум 400px, предпочтительно 100vh-120px, максимум 900px */
      display: flex;
      flex-direction: column;
      justify-content: flex-end;
      padding-bottom: 48px;
      margin-bottom: 48px; /* Добавляем отступ снизу для разделения с контентом */
    }

    /* Мобильная версия */
    @media (max-width: 768px) {
      .blog-header-section {
        padding-bottom: 48px;
        margin-bottom: 32px;
      }
    }
    
    /* Стили для элементов поста блога в соответствии с макетом */
  :global(article h2) {
    font-family: 'Tiempos Text', serif;
    font-weight: 400;
    font-size: 28px;
    line-height: 1.393em;
    letter-spacing: -0.036em;
    margin-top: 48px;
    margin-bottom: 16px;
  }
  
  :global(article p) {
    font-family: 'Die Grotesk B', sans-serif;
    font-weight: 400;
    font-size: 16px;
    line-height: 1.5em;
    margin-top: 24px;
    margin-bottom: 16px;
  }

  /* Дополнительные стили для списков, ссылок и других элементов */
  :global(article ul), :global(article ol) {
    font-family: 'Die Grotesk B', sans-serif;
    font-weight: 400;
    font-size: 16px;
    line-height: 1.5em;
    margin-top: 24px;
    margin-bottom: 16px;
    padding-left: 24px;
  }

  :global(article li) {
    margin-bottom: 16px;
    color: inherit;
  }

  /* Стили для маркеров и цифр в списках */
  :global(article li::marker) {
    font-family: 'Die Grotesk B', sans-serif;
    font-weight: 400;
    color: inherit;
  }

  :global(article a) {
    color: inherit;
    text-decoration: underline;
    text-underline-offset: 2px;
  }

  :global(article a:hover) {
    opacity: 0.8;
  }
</style>