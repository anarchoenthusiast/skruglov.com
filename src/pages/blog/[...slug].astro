---
import { type CollectionEntry, getCollection } from "astro:content";
import PageLayout from "@layouts/PageLayout.astro";
import Container from "@components/Container.astro";
import FormattedDate from "@components/FormattedDate.astro";
import { readingTime } from "@lib/utils";
import CTA from "@components/CTA.astro";
import PostList from "@components/PostList.astro";
import { SITE } from "@consts";

export async function getStaticPaths() {
  const posts = (await getCollection("blog"))
    .filter(post => !post.data.draft)
    .sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf());
  return posts.map((post) => ({
    params: { slug: post.slug },
    props: { post, posts },
  }));
}

type Props = {
  post: CollectionEntry<"blog">;
  posts: CollectionEntry<"blog">[];
};

const { post, posts } = Astro.props;
const { Content } = await post.render();

// Получаем параметр from из URL для передачи в ссылки на другие посты
const fromParam = Astro.url.searchParams.get('from') || 'blog';

// Получаем другие последние посты, исключая текущий
const otherPosts = posts
  .filter(p => p.id !== post.id)
  .slice(0, SITE.NUM_POSTS_ON_HOMEPAGE);

// Если нет других постов, показываем текущий пост
const postsToShow = otherPosts.length > 0 ? otherPosts : [post];

// SEO: определяем canonical URL без параметров и robots meta
const canonicalURL = new URL(`/blog/${post.slug}/`, Astro.site).href;
const hasFromParam = Astro.url.searchParams.has('from');
const robotsMeta = hasFromParam ? 'noindex, follow' : undefined;

const breadcrumbs = [
  { label: SITE.NAME, url: '/' },
  { label: 'Blog', url: '/blog' },
  { label: post.data.title }
];

---

<PageLayout 
  title={post.data.title} 
  description={post.data.description} 
  pageType="blog"
  breadcrumbs={breadcrumbs}
  canonicalURL={canonicalURL}
  robots={robotsMeta}
>
  <!-- Контент страницы с анимацией -->
  <div class="blog-page-content">
    <Container size="blog-mobile">
    <div class="space-y-1 pb-6">
      <div class="animate flex items-center gap-1.5">
        <div class="font-grotesk text-base text-black/44 dark:text-white/44">
          <FormattedDate date={post.data.date} />
        </div>
        &bull;
        <div class="font-grotesk text-base text-black/44 dark:text-white/44">
          {readingTime(post.body)}
        </div>
      </div>
      <h1 class="animate font-tiempos text-4xl text-black dark:text-white tracking-[-0.028em] leading-[1.167] font-normal">
        {post.data.title}
      </h1>
    </div>
    <article class="animate space-y-6">
      <Content />
    </article>
  </Container>
  
      <Container size="blog-mobile">
      <div class="pt-16">
        <PostList 
          title="Latest Writing" 
          posts={postsToShow} 
          seeAllLink="/blog" 
          seeAllText="All writing"
          fromSource={fromParam}
        />
      </div>
    </Container>
    
    <CTA size="blog" />
  </div>
  </PageLayout>
  
  <script is:inline>
    function initBlogPageAnimation() {
      // Проверяем URL параметры
      const urlParams = new URLSearchParams(window.location.search);
      const fromSource = urlParams.get('from');
      const hasFromParam = fromSource === 'home' || fromSource === 'blog';
      
      const pageContent = document.querySelector('.blog-page-content');
      
      if (hasFromParam && pageContent) {
        // Добавляем анимацию появления страницы
        pageContent.style.opacity = '0';
        pageContent.style.transform = 'translateY(20px)';
        
        // Анимируем появление
        setTimeout(() => {
          pageContent.style.transition = 'opacity 0.4s ease-out, transform 0.4s ease-out';
          pageContent.style.opacity = '1';
          pageContent.style.transform = 'translateY(0)';
        }, 100);
      }
    }
    
    function updateMorePostsLinks() {
      // Получаем сохраненное значение или значение из URL
      const urlParams = new URLSearchParams(window.location.search);
      const fromSource = urlParams.get('from');
      const savedSource = sessionStorage.getItem('blogNavigationSource');
      
      // Определяем финальное значение - приоритет сохраненному
      const finalFromParam = savedSource || fromSource || 'blog';
      
      // Находим все ссылки на посты в секции Latest Writing
      const morePostsLinks = document.querySelectorAll('a[href^="/blog/"]');
      
      morePostsLinks.forEach(link => {
        const url = new URL(link.href);
        // Обновляем параметр from
        url.searchParams.set('from', finalFromParam);
        link.href = url.toString();
        
        // Добавляем обработчик для сохранения позиции скролла исходной страницы
        link.addEventListener('click', function() {
          if (finalFromParam === 'home') {
            // Сохраняем позицию главной страницы только если её еще нет
            if (!sessionStorage.getItem('homeScrollPosition')) {
              console.log('More Posts link clicked from home context');
            }
          } else if (finalFromParam === 'blog') {
            // Аналогично для страницы блога
            if (!sessionStorage.getItem('blogScrollPosition')) {
              console.log('More Posts link clicked from blog context');
            }
          }
        });
      });
      
      console.log('Updated More Posts links with from:', finalFromParam);
    }
    
    // Запускаем инициализацию
    document.addEventListener('DOMContentLoaded', function() {
      initBlogPageAnimation();
      updateMorePostsLinks();
    });
    
    document.addEventListener('astro:page-load', function() {
      initBlogPageAnimation();
      updateMorePostsLinks();
    });
  </script>
  
    <style>
    /* Анимация страницы */
    .blog-page-content {
      opacity: 1;
      transform: translateY(0);
      filter: blur(0px);
      transition: opacity 0.15s ease-out, transform 0.4s ease-out, filter 0.15s ease-out;
    }
    
    /* Стили для элементов поста блога в соответствии с макетом */
  :global(article h2) {
    font-family: 'Tiempos Text', serif;
    font-weight: 400;
    font-size: 28px;
    line-height: 1.393em;
    letter-spacing: -0.036em;
    margin-top: 48px;
    margin-bottom: 16px;
  }
  
  :global(article p) {
    font-family: 'Die Grotesk B', sans-serif;
    font-weight: 400;
    font-size: 16px;
    line-height: 1.5em;
    margin-top: 24px;
    margin-bottom: 16px;
  }

  /* Дополнительные стили для списков, ссылок и других элементов */
  :global(article ul), :global(article ol) {
    font-family: 'Die Grotesk B', sans-serif;
    font-weight: 400;
    font-size: 16px;
    line-height: 1.5em;
    margin-top: 24px;
    margin-bottom: 16px;
    padding-left: 24px;
  }

  :global(article li) {
    margin-bottom: 8px;
  }

  :global(article a) {
    color: inherit;
    text-decoration: underline;
    text-underline-offset: 2px;
  }

  :global(article a:hover) {
    opacity: 0.8;
  }
</style>