---
import { type CollectionEntry, getCollection } from "astro:content";
import PageLayout from "@layouts/PageLayout.astro";
import Container from "@components/Container.astro";
import PostCard from "@components/PostCard.astro";
import { BLOG, SITE } from "@consts";

const data = (await getCollection("blog"))
  .filter(post => !post.data.draft)
  .sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf());
  
type Acc = {
  [year: string]: CollectionEntry<"blog">[];
}

const posts = data.reduce((acc: Acc, post) => {
    const year = post.data.date.getFullYear().toString();
    if (!acc[year]) {
      acc[year] = [];
    }
    acc[year].push(post);
    return acc;
  }, {});

const years = Object.keys(posts).sort((a, b) => parseInt(b) - parseInt(a)); 

const breadcrumbs = [
  { label: SITE.NAME, url: '/' },
  { label: 'Blog' }
];

---

<PageLayout 
  title={BLOG.TITLE} 
  description={BLOG.DESCRIPTION} 
  pageType="default"
  breadcrumbs={breadcrumbs}
>
  <Container size="default">
    <div class="space-y-10">
      <div class="space-y-16">
        {years.map(year => (
          <section class="animate space-y-4">
            <div class="font-grotesk font-normal text-base text-black/44 dark:text-white/44">
              {year}
            </div>
            <div>
              <ul class="flex flex-col gap-2">
                {
                  posts[year].map((post) => (
                    <PostCard post={post} fromSource="blog" />
                  ))
                }
              </ul>
            </div>
          </section>
        ))}
      </div>
    </div>
  </Container>
</PageLayout>

<script is:inline>
  function initBlogScrollLogic() {
    // Очищаем сохраненный источник навигации блога если пришли на страницу блога
    sessionStorage.removeItem('blogNavigationSource');
    
    // Проверяем флаг отключения анимаций
    const shouldDisableAnimations = sessionStorage.getItem('disablePageAnimations') === 'true';
    
    if (shouldDisableAnimations) {
      // Отключаем анимации на странице блога
      const animatedElements = document.querySelectorAll('.animate');
      animatedElements.forEach(el => {
        el.style.opacity = '1';
        el.style.transform = 'none';
        el.classList.remove('animate');
      });
      
      // Очищаем флаг
      sessionStorage.removeItem('disablePageAnimations');
      
      console.log('Disabled animations on blog page due to post close');
    }
    
    // Восстанавливаем позицию скролла при возврате с поста
    const savedScrollPosition = sessionStorage.getItem('blogScrollPosition');
    if (savedScrollPosition && shouldDisableAnimations) {
      // Восстанавливаем позицию после небольшой задержки
      setTimeout(() => {
        window.scrollTo(0, parseInt(savedScrollPosition));
        sessionStorage.removeItem('blogScrollPosition');
        console.log('Restored blog scroll position:', savedScrollPosition);
      }, 50);
    }
    
    // Добавляем обработчики для сохранения позиции скролла при переходе на посты
    const postLinks = document.querySelectorAll('a[href*="/blog/"][href*="from=blog"]');
    postLinks.forEach(link => {
      link.addEventListener('click', function() {
        // Сохраняем текущую позицию скролла только если её еще нет
        if (!sessionStorage.getItem('blogScrollPosition')) {
          sessionStorage.setItem('blogScrollPosition', window.scrollY.toString());
          console.log('Saved blog scroll position:', window.scrollY);
        }
      });
    });
  }
  
  document.addEventListener('DOMContentLoaded', initBlogScrollLogic);
  document.addEventListener('astro:page-load', initBlogScrollLogic);
</script>
