---
import { getCollection } from "astro:content";
import PageLayout from "@layouts/PageLayout.astro";
import Container from "@components/Container.astro";
import { PROJECTS, SITE } from "@consts";

const projects = (await getCollection("projects"))
  .filter(project => !project.data.draft)
  .sort((a, b) => {
    // Если есть поле priority, сортируем по нему (меньшее значение = выше)
    if (a.data.priority !== undefined && b.data.priority !== undefined) {
      // При возрастающей сортировке первым будет проект с меньшим priority
      return a.data.priority - b.data.priority;
    }
    // Если у одного проекта есть priority, а у другого нет, приоритетный проект должен быть выше
    if (a.data.priority !== undefined && b.data.priority === undefined) {
      return -1;
    }
    if (a.data.priority === undefined && b.data.priority !== undefined) {
      return 1;
    }
    // По умолчанию сортируем по дате (более новые выше)
    return b.data.date.valueOf() - a.data.date.valueOf();
  });

const breadcrumbs = [
  { label: SITE.NAME, url: '/' },
  { label: 'Projects' }
];
---

<PageLayout 
  title={PROJECTS.TITLE} 
  description={PROJECTS.DESCRIPTION} 
  pageType="default"
  breadcrumbs={breadcrumbs}
>
  <Container size="default">
    <div class="space-y-10 animate">
      <div class="grid grid-cols-2 md:grid-cols-2 lg:grid-cols-3 gap-x-4 gap-y-12">
        {projects.map((project, index) => (
          <li class="flex flex-col gap-4 animate">
            <a href={`/projects/${project.slug}/?from=projects`} class="block group">
              <div class="flex flex-col gap-4">
                {project.data.images && project.data.images.length > 0 ? (
                  <img 
                    src={project.data.images[0].url} 
                    alt={project.data.images[0].alt} 
                    class="aspect-square w-full object-cover rounded-lg"
                  />
                ) : (
                  <div class="aspect-square bg-[#D9D9D9] rounded-lg"></div>
                )}
                <div class="flex flex-col">
                  <div class="font-grotesk font-normal text-base text-black dark:text-white group-hover:opacity-80 transition-opacity">
                    {project.data.title}
                  </div>
                  <div class="font-grotesk font-normal text-base text-black/44 dark:text-white/44">
                    {project.data.projectType}
                  </div>
                </div>
              </div>
            </a>
          </li>
        ))}
      </div>
    </div>
  </Container>
</PageLayout>

<script is:inline>
  function initProjectsScrollLogic() {
    // Очищаем сохраненный источник навигации проектов если пришли на страницу проектов
    sessionStorage.removeItem('projectNavigationSource');
    
    // Проверяем флаг отключения анимаций
    const shouldDisableAnimations = sessionStorage.getItem('disablePageAnimations') === 'true';
    
    if (shouldDisableAnimations) {
      // Отключаем анимации на странице проектов
      const animatedElements = document.querySelectorAll('.animate');
      animatedElements.forEach(el => {
        el.style.opacity = '1';
        el.style.transform = 'none';
        el.classList.remove('animate');
      });
      
      // Очищаем флаг
      sessionStorage.removeItem('disablePageAnimations');
      
      console.log('Disabled animations on projects page due to project close');
    }
    
    // Восстанавливаем позицию скролла при возврате с проекта
    const savedScrollPosition = sessionStorage.getItem('projectsScrollPosition');
    if (savedScrollPosition && shouldDisableAnimations) {
      // Восстанавливаем позицию после небольшой задержки
      setTimeout(() => {
        window.scrollTo(0, parseInt(savedScrollPosition));
        sessionStorage.removeItem('projectsScrollPosition');
        console.log('Restored projects scroll position:', savedScrollPosition);
      }, 50);
    }
    
    // Добавляем обработчики для сохранения позиции скролла при переходе на проекты
    const projectLinks = document.querySelectorAll('a[href*="/projects/"][href*="from=projects"]');
    projectLinks.forEach(link => {
      link.addEventListener('click', function() {
        // Сохраняем текущую позицию скролла только если её еще нет
        if (!sessionStorage.getItem('projectsScrollPosition')) {
          sessionStorage.setItem('projectsScrollPosition', window.scrollY.toString());
          console.log('Saved projects scroll position:', window.scrollY);
        }
      });
    });
  }
  
  document.addEventListener('DOMContentLoaded', initProjectsScrollLogic);
  document.addEventListener('astro:page-load', initProjectsScrollLogic);
</script>
